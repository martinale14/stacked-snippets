{
  "Sized box with height": {
    "scope": "dart",
    "prefix": "sbh",
    "body": [
      "const SizedBox(height: ${1:height}),"
    ],
    "description": "Creates a Sized Box with the given height"
  },
  "Sized box with width": {
    "scope": "dart",
    "prefix": "sbw",
    "body": [
      "const SizedBox(width: ${1:width}),"
    ],
    "description": "Creates a Sized Box with the given width"
  },
  "ViewModel Builder reactive": {
    "scope": "dart",
    "prefix": "vmbr",
    "body": [
      "ViewModelBuilder<${1:ViewModelName}>.reactive(",
      "      viewModelBuilder: () => ${1:ViewModelName}(),",
      "      builder: (context, viewModel, child) => Container(),",
      ");"
    ],
    "description": "Creates a reactive ViewModelBuilder"
  },
  "ViewModel Builder no reactive": {
    "scope": "dart",
    "prefix": "vmbn",
    "body": [
      "ViewModelBuilder<${1:ViewModelName}>.nonReactive(",
      "      viewModelBuilder: () => ${1:ViewModelName}(),",
      "      builder: (context, viewModel, child) => Container(),",
      ");"
    ],
    "description": "Creates a non reactive ViewModelBuilder"
  },
  "ViewModel Widget": {
    "scope": "dart",
    "prefix": "vmw",
    "body": [
      "import 'package:stacked/stacked.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends ViewModelWidget<${2:ViewModel}> {",
      "  const ${1:WidgetName}({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(",
      "          BuildContext context, ${2:ViewModel} viewModel) =>",
      "      const SizedBox.shrink();",
      "}"
    ],
    "description": "Creates a Hook Widget with a ViewModel"
  },
  "Stacked Service": {
    "scope": "dart",
    "prefix": "lService",
    "body": [
      "import 'package:injectable/injectable.dart';",
      "",
      "@lazySingleton",
      "class ${1:ServiceName} extends ${2:ServiceBaseClass} {",
      "",
      "  //TODO: Implement Service Constructor",
      "  @factoryMethod",
      "  ${1:ServiceName}();",
      "}"
    ],
    "description": "Creates a Stacked Hooks Service"
  },
  "Chopper DataSource": {
    "scope": "dart",
    "prefix": "cDataS",
    "body": [
      "import 'package:chopper/chopper.dart';",
      "",
      "part '$TM_FILENAME_BASE.chopper.dart';",
      "",
      "@ChopperApi()",
      "abstract class ${1:DataSorceName} extends ChopperService {",
      "",
      "  static _$${1:DataSorceName} create([ChopperClient? client]) =>",
      "      _$${1:DataSorceName}(client);",
      "}"
    ],
    "description": "Creates a DataSource from Chopper Api"
  },
  "Json Annotations model": {
    "scope": "dart",
    "prefix": "jModel",
    "body": [
      "import 'package:json_annotation/json_annotation.dart';",
      "",
      "part '$TM_FILENAME_BASE.g.dart';",
      "",
      "@JsonSerializable(explicitToJson: true, includeIfNull: false)",
      "class ${1:ModelName} {",
      "",
      "  ${1:ModelName}();",
      "",
      "  factory ${1:ModelName}.fromJson(",
      "          Map<String, dynamic> json) =>",
      "      _$${1:ModelName}FromJson(json);",
      "",
      "  Map<String, dynamic> toJson() =>",
      "      _$${1:ModelName}ToJson(this);",
      "}"
    ],
    "description": "Creates a model with annotations from json annotations package"
  },
  "Base ViewModel": {
    "scope": "dart",
    "prefix": "bViewModel",
    "body": [
      "import 'package:stacked/stacked.dart';",
      "",
      "class ${1:ViewModelName} extends ${2:BaseViewModel}{",
      "",
      "  bool get loading => false;",
      "",
      "  @override",
      "  List<ListenableServiceMixin> get reactiveServices => [];",
      "",
      "  ${1:ViewModelName}();",
      "",
      "}"
    ],
    "description": "Creates a ViewModel based on a existing base ViewModel"
  },
  "Base Repository": {
    "scope": "dart",
    "prefix": "iRepo",
    "body": [
      "import 'package:injectable/injectable.dart';",
      "",
      "@injectable",
      "class ${1:RepositoryName} {",
      "final ${2:DatasourceClass} _datasource",
      "",
      "",
      "  ${1:RepositoryName}.from(this_datasource);",
      "",
      "}"
    ],
    "description": "Creates a repository with a given datasource"
  }
}